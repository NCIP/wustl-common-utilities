//
// This file was generated by the JavaTM Architecture for
//XML Binding(JAXB) Reference Implementation, v1.0.4-b18-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2005.08.23 at 10:44:28 GMT+05:30
//


package edu.wustl.common.cde.xml.impl;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

import com.sun.tools.xjc.runtime.AbstractUnmarshallingEventHandlerImpl;
import com.sun.tools.xjc.runtime.UnmarshallableObject;
import com.sun.tools.xjc.runtime.UnmarshallingContext;
import com.sun.tools.xjc.runtime.UnmarshallingEventHandler;
import com.sun.tools.xjc.runtime.Util;
import com.sun.tools.xjc.runtime.ValidatableObject;
import com.sun.tools.xjc.runtime.XMLSerializable;
import com.sun.tools.xjc.runtime.XMLSerializer;

import edu.wustl.common.util.global.Constants;
/**
 *
 * @author
 *
 */
public class XMLCDECacheTypeImpl // NOPMD
				implements edu.wustl.common.cde.xml.XMLCDECacheType,
						   com.sun.xml.bind.JAXBObject,UnmarshallableObject,
						   XMLSerializable, ValidatableObject
{
	/**
	 * boolean variable.
	 */
    private boolean hasRefreshTime;
    /**
	 * Integer variable.
	 */
    private int refreshTime;
    /**
	 * ListImplementation object.
	 */
    private com.sun.xml.bind.util.ListImpl xmlCDE;
    /**
	 * boolean variable.
	 */
    private boolean hasLazyLoading ;
    /**
	 * boolean variable.
	 */
    private boolean lazyLoading ;
    /**
	 * constant variable.
	 */
    public static final java.lang.Class VERSION = (edu.wustl.common.cde.xml.impl.JAXBVersion.class);
    /**
	 * Grammar schemaFragment object.
	 */
    private static com.sun.msv.grammar.Grammar schemaFragment;
    /**
	 * @return Class variable
	 */
    /*private final static java.lang.Class PRIMARY_INTERFACE_CLASS()
    {
        return (edu.wustl.common.cde.xml.XMLCDECacheType.class);
    }*/
    /**
	 * @return integer value.
	 */
    public int getRefreshTime()
    {
        return refreshTime;
    }
    /**
     * @param value Integer value to set.
     */
    public void setRefreshTime(int value)
    {
        refreshTime = value;
        hasRefreshTime = true;
    }
    /**
     *
     * @return List Implementation object.
     */
    protected com.sun.xml.bind.util.ListImpl _getXMLCDE() // NOPMD
    {
        if (xmlCDE == null)
        {
            xmlCDE = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return xmlCDE;
    }
    /**
     * @return List
     */
    public java.util.List getXMLCDE()
    {
        return _getXMLCDE();
    }
    /**
     * @return boolean result
     */
    public boolean isLazyLoading()
    {
        return lazyLoading;
    }
    /**
     * @param value boolean value to set.
     */
    public void setLazyLoading(boolean value)
    {
        lazyLoading = value;
        hasLazyLoading = true;
    }
    /**
     * @param context UnmarshallingContext object.
     * @return UnmarshallingEventHandler object.
     */
    public UnmarshallingEventHandler createUnmarshaller(UnmarshallingContext context)
    {
        return new edu.wustl.common.cde.xml.impl.XMLCDECacheTypeImpl.Unmarshaller(context);
    }
    /**
     * @param context XMLSerializer object
     * @throws org.xml.sax.SAXException throws SAXException
     */
    public void serializeBody(XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = ((xmlCDE == null)? 0 :xmlCDE.size());
        while (idx2 != len2)
        {
            context.startElement("", Constants.XMLCDE );
            int idx0 = idx2;
            context.childAsURIs(((com.sun.xml.bind.JAXBObject) xmlCDE.get(idx0 ++)), Constants.XMLCDE );
            context.endNamespaceDecls();
            int idx1 = idx2;
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject) xmlCDE.get(idx1 ++)), Constants.XMLCDE );
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject) xmlCDE.get(idx2 ++)), Constants.XMLCDE );
            context.endElement();
        }
    }
    /**
     * @param context XMLSerializer object
     * @throws org.xml.sax.SAXException throws SAXException
     */
    public void serializeAttributes(XMLSerializer context) // NOPMD
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = ((xmlCDE == null)? 0 :xmlCDE.size());
        if (hasLazyLoading)
        {
            context.startAttribute("", Constants.LAZY_LOADING);
            try
            {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean
                		(((boolean) lazyLoading)), "LazyLoading");
            }
            catch (java.lang.Exception e)
            {
               Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (hasRefreshTime)
        {
            context.startAttribute("", Constants.REFRESH_TIME);
            try
            {
                context.text(javax.xml.bind.DatatypeConverter.printInt(((int) refreshTime)), "RefreshTime");
            }
            catch (java.lang.Exception e)
            {
                Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        while (idx2 != len2)
        {
            idx2 += Constants.CONSTANT_ONE;
        }
    }
    /**
     * @param context XMLSerializer object
     * @throws org.xml.sax.SAXException throws SAXException
     */
    public void serializeURIs(XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = ((xmlCDE == null)? 0 :xmlCDE.size());
        while (idx2 != len2)
        {
            idx2 += Constants.CONSTANT_ONE;
        }
    }
    /**
     * @return Class object
     */
    public java.lang.Class getPrimaryInterface()
    {
        return (edu.wustl.common.cde.xml.XMLCDECacheType.class);
    }
    /**
     * @return DocumentDeclaration object.
     */
    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() // NOPMD
    {
    	if (schemaFragment == null)
    	{
    		schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
    				"\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000" +
    				"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom." +
    				"sun.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002" +
    				"\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/grammar/Expression;L\u0000" +
    				"\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expression" +
    				"\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibility" +
    				"t\u0000\u0013Ljava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002" +
    				"xpppsq\u0000~\u0000\u0000ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000" +
    				"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom." +
    				"sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002" +
    				"\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003ppsr\u0000" +
    				"\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000" +
    				"\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv" +
    				"/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000" +
    				"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignore" +
    				"UndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000" +
    				"\u0003pp\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\npp\u0000sr\u0000\u001dcom" +
    				".sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001" +
    				"\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\u0007sr\u0000\u0011j" +
    				"ava.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000" +
    				"\u0005valuexp\u0000psr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000" +
    				"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000" +
    				"\u0002L\u0000\tnameClassq\u0000~\u0000\u000bxq\u0000~\u0000\u0003q\u0000~\u0000" +
    				"\u0014psr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000" +
    				"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq" +
    				"\u0000~\u0000\u0013\u0001psr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000" +
    				"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv" +
    				".grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000" +
    				"\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000" +
    				"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q" +
    				"\u0000~\u0000\u0019psr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000" +
    				"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000" +
    				"\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000 xq\u0000~\u0000" +
    				"\u001bt\u0000\u001fedu.wustl.common.cde.xml.XMLCDEt\u0000+http://java.sun.com/j"+
    				"axb/xjc/dummy-elementssq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0015q\u0000~" +
    				"\u0000\u0014psr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000" +
    				"\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg" +
    				"/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004" +
    				"namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000" +
    				"\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
    				"\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType" +
    				"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com." +
    				"sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
    				"\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl" +
    				"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000" +
    				"\fnamespaceUriq\u0000~\u0000 L\u0000\btypeNameq\u0000~\u0000 L\u0000\nwhite" +
    				"Spacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://" +
    				"www.w3.org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd." +
    				"WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001" +
    				"\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000" +
    				"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun." +
    				"msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000" +
    				"\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun." +
    				"msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000" +
    				"\tlocalNameq\u0000~\u0000 L\u0000\fnamespaceURIq\u0000~\u0000 xpq\u0000~\u00001" +
    				"q\u0000~\u00000sq\u0000~\u0000\u001ft\u0000\u0004typet\u0000)http://www.w3.org" +
    				"/2001/XMLSchema-instanceq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000\u0006" +
    				"XMLCDEt\u0000\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u0015q\u0000~\u0000" +
    				"\u0014psq\u0000~\u0000&ppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000" +
    				"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000+q" +
    				"\u0000~\u00000t\u0000\u0007booleanq\u0000~\u00004q\u0000~\u00006sq\u0000~" +
    				"\u00007q\u0000~\u0000Dq\u0000~\u00000sq\u0000~\u0000\u001ft\u0000\u000blazy" +
    				"Loadingq\u0000~\u0000>q\u0000~\u0000\u001esq\u0000~\u0000\u0010ppsq\u0000~" +
    				"\u0000\u0015q\u0000~\u0000\u0014psq\u0000~\u0000&ppsr\u0000 com.sun.msv.datatype"+
    				".xsd.IntType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000" +
    				"\u0000xr\u0000+com.sun.msv.datatype.xsd.IntegerDerivedType\u0099\u00f1]" +
    				"\u0090&6k\u00be\u0002\u0000\u0001L\u0000\nbaseFacetst\u0000)Lcom/sun/msv" +
    				"/datatype/xsd/XSDatatypeImpl;xq\u0000~\u0000+q\u0000~\u00000t\u0000\u0003intq" +
    				"\u0000~\u00004sr\u0000*com.sun.msv.datatype.xsd.MaxInclusiveFacet\u0000\u0000" +
    				"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv." +
    				"datatype.xsd.RangeFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002" +
    				"\u0000\u0001L\u0000\nlimitValuet\u0000\u0012Ljava/lang/Object;xr\u00009com." +
    				"sun.msv.datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7" +
    				"\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet" +
    				"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fis" +
    				"FacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypeq\u0000~\u0000ML" +
    				"\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000" +
    				"\tfacetNameq\u0000~\u0000 xq\u0000~\u0000-ppq\u0000~\u00004\u0000\u0001sr\u0000" +
    				"*com.sun.msv.datatype.xsd.MinInclusiveFacet\u0000\u0000\u0000\u0000\u0000\u0000" +
    				"\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Qppq\u0000~\u00004\u0000\u0000sr" +
    				"\u0000!com.sun.msv.datatype.xsd.LongType\u0000\u0000\u0000\u0000\u0000\u0000" +
    				"\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Lq\u0000~\u00000t\u0000\u0004longq" +
    				"\u0000~\u00004sq\u0000~\u0000Pppq\u0000~\u00004\u0000\u0001sq\u0000~\u0000Wppq" +
    				"\u0000~\u00004\u0000\u0000sr\u0000$com.sun.msv.datatype.xsd.IntegerType\u0000" +
    				"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Lq" +
    				"\u0000~\u00000t\u0000\u0007integerq\u0000~\u00004sr\u0000,com.sun.msv.datatype." +
    				"xsd.FractionDigitsFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002" +
    				"\u0000\u0001I\u0000\u0005scalexr\u0000;com.sun.msv.datatype.xsd.DataTypeWith" +
    				"LexicalConstraintFacetT\u0090\u001c>\u001azb\u00ea\u0002\u0000\u0000xq\u0000~" +
    				"\u0000Tppq\u0000~\u00004\u0001\u0000sr\u0000#com.sun.msv.datatype.xsd.NumberType"+
    				"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~" +
    				"\u0000+q\u0000~\u00000t\u0000\u0007decimalq\u0000~\u00004q\u0000~\u0000et" +
    				"\u0000\u000efractionDigits\u0000\u0000\u0000\u0000q\u0000~\u0000_t\u0000" +
    				"\fminInclusivesr\u0000\u000ejava.lang.Long;\u008b\u00e4\u0090\u00cc\u008f#" +
    				"\u00df\u0002\u0000\u0001J\u0000\u0005valuexr\u0000\u0010java.lang.Number\u0086" +
    				"\u00ac\u0095\u001d\u000b\u0094\u00e0\u008b\u0002\u0000\u0000xp\u0080\u0000\u0000"+
    				"\u0000\u0000\u0000\u0000\u0000q\u0000~\u0000_t\u0000\fmaxInclusivesq\u0000~" +
    				"\u0000i\u007f\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u00ffq\u0000~\u0000Zq\u0000~" +
    				"\u0000hsr\u0000\u0011java.lang.Integer\u0012\u00e2\u00a0\u00a4\u00f7\u0081" +
    				"\u00878\u0002\u0000\u0001I\u0000\u0005valuexq\u0000~\u0000j\u0080\u0000\u0000" +
    				"\u0000q\u0000~\u0000Zq\u0000~\u0000lsq\u0000~\u0000n\u007f\u00ff\u00ff\u00ffq" +
    				"\u0000~\u00006sq\u0000~\u00007q\u0000~\u0000Oq\u0000~\u00000sq\u0000~\u0000" +
    				"\u001ft\u0000\u000brefreshTimeq\u0000~\u0000>q\u0000~\u0000\u001esr\u0000\"com." +
    				"sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001" +
    				"\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool" +
    				"$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j" +
    				"\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000" +
    				"\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool" +
    				";xp\u0000\u0000\u0000\t\u0001pq\u0000~\u0000\u0011q\u0000~\u0000\u0012q\u0000~" +
    				"\u0000\u0005q\u0000~\u0000?q\u0000~\u0000Hq\u0000~\u0000\tq\u0000~\u0000\u000eq" +
    		"\u0000~\u0000\u0006q\u0000~\u0000$x"));
    	}
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }
    /**
     *
     * @author
     *
     */
    public class Unmarshaller // NOPMD
        extends AbstractUnmarshallingEventHandlerImpl
    {
    	/**
    	 *
    	 * @param context UnmarshallingContext object.
    	 */
        public Unmarshaller(UnmarshallingContext context)
        {
            super(context, "----------");
        }
        /**
         *
         * @param context UnmarshallingContext object.
         * @param startState integer value to set
         */
        protected Unmarshaller(UnmarshallingContext context, int startState)
        {
            this(context);
            state = startState;
        }
        /**
         * @return java.lang.Object
         */
        public java.lang.Object owner()
        {
            return edu.wustl.common.cde.xml.impl.XMLCDECacheTypeImpl.this;
        }
        /**
         *
         * @param uri String value
         * @param local String value
         * @param qname String value
         * @param atts Attributes object
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void enterElement(java.lang.String uri, java.lang.String local, // NOPMD
        		java.lang.String qname, org.xml.sax.Attributes atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            boolean flag = true ;
            outer:
            while (true)
            {
                switch (state)
                {
                    case  Constants.CONSTANT_SIX :
                        if ((Constants.XMLCDE  == local)&&("" == uri))
                        {
                            context.pushAttributes(atts, false);
                            state = Constants.CONSTANT_SEVEN;
                            flag = false ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", Constants.LAZY_LOADING);
                        if (attIdx >= 0)
                        {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = Constants.CONSTANT_THREE;
                            continue outer;
                        }
                        state = Constants.CONSTANT_THREE;
                        continue outer;
                    case  Constants.CONSTANT_SEVEN :
                        	flag = checkEnterElement(uri, local, qname, atts) ;
                        break;
                    case  Constants.CONSTANT_NINE :
                        if ((Constants.XMLCDE  == local)&&("" == uri))
                        {
                            context.pushAttributes(atts, false);
                            state = Constants.CONSTANT_SEVEN;
                            flag = false ; break ;
                        }
                        revertToParentFromEnterElement(uri, local, qname, atts);
                        return ;
                    case  Constants.CONSTANT_THREE :
                        attIdx = context.getAttribute("", Constants.REFRESH_TIME);
                        if (attIdx >= 0)
                        {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = Constants.CONSTANT_SIX;
                            continue outer;
                        }
                        state = Constants.CONSTANT_SIX;
                        continue outer;

                    default :

                }
                if(!flag)
                { break ; }
                super.enterElement(uri, local, qname, atts);
                break;
            }
        }
        /**
         *
         * @param value String value.
         * @throws org.xml.sax.SAXException throw SAXException
         */
        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try
            {
                lazyLoading = javax.xml.bind.DatatypeConverter.
                parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                hasLazyLoading = true;
            }
            catch (java.lang.Exception e)
            {
                handleParseConversionException(e);
            }
        }
        /**
         *
         * @param value String value.
         * @throws org.xml.sax.SAXException throw SAXException
         */
        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try
            {
                refreshTime = javax.xml.bind.DatatypeConverter.
                parseInt(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                hasRefreshTime = true;
            }
            catch (java.lang.Exception e)
            {
                handleParseConversionException(e);
            }
        }
        /**
         *
         * @param uri String value
         * @param local String value
         * @param qname String value
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void leaveElement(java.lang.String uri, java.lang.String local, // NOPMD
        		java.lang.String qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            boolean flag = true ;
            outer:
            while (true)
            {
                switch (state)
                {
                    case  0 :
                        attIdx = context.getAttribute("", Constants.LAZY_LOADING);
                        if (attIdx >= 0)
                        {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = Constants.CONSTANT_THREE;
                            continue outer;
                        }
                        state = Constants.CONSTANT_THREE;
                        continue outer;
                    case  Constants.CONSTANT_SEVEN :
                        attIdx = context.getAttribute("", "cache");
                        if (attIdx >= 0)
                        {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(uri, local, qname);
                            flag = false ; break ;
                        }
                        attIdx = context.getAttribute("", Constants.LAZY_LOADING);
                        if (attIdx >= 0)
                        {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(uri, local, qname);
                            flag = false ; break ;
                        }
                        break;
                    case  Constants.CONSTANT_NINE :
                        revertToParentFromLeaveElement(uri, local, qname);
                        flag = false ; break ;
                    case  Constants.CONSTANT_EIGHT :
                        if ((Constants.XMLCDE == local)&&("" == uri))
                        {
                            context.popAttributes();
                            state = Constants.CONSTANT_NINE;
                            flag = false ;
                        }
                        break;
                    case  Constants.CONSTANT_THREE :
                        attIdx = context.getAttribute("", Constants.REFRESH_TIME);
                        if (attIdx >= 0)
                        {
                            final java.lang.String value = context.eatAttribute(attIdx);
                            eatText2(value);
                            state = Constants.CONSTANT_SIX;
                            continue outer;
                        }
                        state = Constants.CONSTANT_SIX;
                        continue outer;

                   default :
                }
                if(!flag)
                { break ; }
                super.leaveElement(uri, local, qname);
                break;
            }
        }
        /**
         *
         * @param uri String value
         * @param local String value
         * @param qname String value
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void enterAttribute(java.lang.String uri, java.lang.String local, // NOPMD
        		java.lang.String qname)
            throws org.xml.sax.SAXException
        {
            boolean flag = true ;
            outer:
            while (true)
            {
                switch (state)
                {
                    case  0 :
                        if ((Constants.LAZY_LOADING == local)&&("" == uri))
                        {
                            state = Constants.CONSTANT_ONE;
                            flag = false ; break ;
                        }
                        state = Constants.CONSTANT_THREE;
                        continue outer;
                    case  Constants.CONSTANT_SEVEN :
                        if (("cache" == local)&&("" == uri))
                        {
                            _getXMLCDE().add(((edu.wustl.common.cde.xml.impl.XMLCDEImpl)
                            		spawnChildFromEnterAttribute((edu.wustl.common.cde.xml.
                            		impl.XMLCDEImpl.class), Constants.CONSTANT_EIGHT, uri, local, qname)));
                            flag = false ; break ;
                        }
                        if ((Constants.LAZY_LOADING == local)&&("" == uri))
                        {
                            _getXMLCDE().add(((edu.wustl.common.cde.xml.impl.XMLCDEImpl)
                            		spawnChildFromEnterAttribute((edu.wustl.common.cde.xml.
                            		impl.XMLCDEImpl.class), Constants.CONSTANT_EIGHT, uri, local, qname)));
                            flag = false ;
                        }
                        break;
                    case  Constants.CONSTANT_NINE :
                        revertToParentFromEnterAttribute(uri, local, qname);
                        flag = false ; break ;
                    case  Constants.CONSTANT_THREE :
                        if ((Constants.REFRESH_TIME == local)&&("" == uri))
                        {
                            state = Constants.CONSTANT_FOUR;
                            return ;
                        }
                        state = Constants.CONSTANT_SIX;
                        continue outer;

                    default :
                }
                if(!flag)
                { break ; }
                super.enterAttribute(uri, local, qname);
                break;
            }
        }
        /**
         *
         * @param uri String value
         * @param local String value
         * @param qname String value
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void leaveAttribute(java.lang.String uri, java.lang.String local, // NOPMD
        		java.lang.String qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            boolean flag = true ;
            outer:
            while (true)
            {
                switch (state)
                {
                    case  Constants.CONSTANT_TWO :
                        if ((Constants.LAZY_LOADING  == local)&&("" == uri))
                        {
                            state = Constants.CONSTANT_THREE;
                            flag = false ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", Constants.LAZY_LOADING);
                        if (attIdx >= 0)
                        {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = Constants.CONSTANT_THREE;
                            continue outer;
                        }
                        state = Constants.CONSTANT_THREE;
                        continue outer;
                    case  Constants.CONSTANT_FIVE :
                        if ((Constants.REFRESH_TIME == local)&&("" == uri))
                        {
                            state = Constants.CONSTANT_SIX;
                            flag = false ;
                        }
                        break;
                    case  Constants.CONSTANT_SEVEN :
                        attIdx = context.getAttribute("", "cache");
                        if (attIdx >= 0)
                        {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(uri, local, qname);
                            flag = false ;
                            break ;
                        }
                        attIdx = context.getAttribute("", Constants.LAZY_LOADING);
                        if (attIdx >= 0)
                        {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(uri, local, qname);
                            flag = false ;
                        }
                        break;
                    case  Constants.CONSTANT_NINE :
                        revertToParentFromLeaveAttribute(uri, local, qname);
                        flag = false ; break ;
                    case  Constants.CONSTANT_THREE :
                        attIdx = context.getAttribute("", Constants.REFRESH_TIME);
                        if (attIdx >= 0)
                        {
                            final java.lang.String value = context.eatAttribute(attIdx);
                            eatText2(value);
                            state = Constants.CONSTANT_SIX;
                            continue outer;
                        }
                        state = Constants.CONSTANT_SIX;
                        continue outer;

                    default :
                }
                if(!flag)
                { 	 break ;   }
                super.leaveAttribute(uri, local, qname);
                break;
            }
        }
        /**
         *
         * @param value String value
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void handleText(final java.lang.String value) // NOPMD
            throws org.xml.sax.SAXException
        {
            int attIdx;
            boolean flag = true ;
            outer:
            while (true)
            {
                try
                {
                    switch (state)
                    {
                        case  0 :
                            attIdx = context.getAttribute("", Constants.LAZY_LOADING);
                            if (attIdx >= 0)
                            {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = Constants.CONSTANT_THREE;
                                continue outer;
                            }
                            state = Constants.CONSTANT_THREE;
                            continue outer;
                        case  Constants.CONSTANT_SEVEN :
                            attIdx = context.getAttribute("", "cache");
                            if (attIdx >= 0)
                            {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                flag = false ; break ;
                            }
                            attIdx = context.getAttribute("", Constants.LAZY_LOADING);
                            if (attIdx >= 0)
                            {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                flag = false ;
                            }
                            break;
                        case  Constants.CONSTANT_FOUR :
                            eatText2(value);
                            state = Constants.CONSTANT_FIVE;
                            flag = false ; break ;
                        case  Constants.CONSTANT_ONE :
                            eatText1(value);
                            state = Constants.CONSTANT_TWO;
                            flag = false ; break ;
                        case  Constants.CONSTANT_NINE :
                            revertToParentFromText(value);
                            flag = false ; break ;
                        case  Constants.CONSTANT_THREE :
                            attIdx = context.getAttribute("", Constants.REFRESH_TIME);
                            if (attIdx >= 0)
                            {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText2(v);
                                state = Constants.CONSTANT_SIX;
                                continue outer;
                            }
                            state = Constants.CONSTANT_SIX;
                            continue outer;

                        default :
                    }
                }
                catch (java.lang.RuntimeException e)
                {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }
        /**
         *
         * @param uri String value
         * @param local String value
         * @param qname String value
         * @param atts Attributes object
         * @return boolean result
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public boolean checkEnterElement(String uri,String local,String qname,Attributes atts)
        						throws SAXException
        {
        	boolean flag = true ;
        	int attIdx = context.getAttribute("", "cache");
            if (attIdx >= 0)
            {
                context.consumeAttribute(attIdx);
                context.getCurrentHandler().enterElement(uri, local, qname, atts);
                flag = false ;
            }
            else
            {
            	attIdx = context.getAttribute("", Constants.LAZY_LOADING);
            	if (attIdx >= 0)
            	{
            		context.consumeAttribute(attIdx);
            		context.getCurrentHandler().enterElement(uri, local, qname, atts);
            		flag = false ;
            	}
            	else if (("name" == local)&&("" == uri))
            	{
            		_getXMLCDE().add(((edu.wustl.common.cde.xml.impl.XMLCDEImpl)
            			spawnChildFromEnterElement((edu.wustl.common.cde.xml.impl.XMLCDEImpl
            			.class), Constants.CONSTANT_EIGHT, uri,local, qname, atts)));
            		flag = false ;
            	}
            }
            return flag ;
        }
    }
}
