//
// This file was generated by the JavaTM Architecture for
//XML Binding(JAXB) Reference Implementation, v1.0.4-b18-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2005.08.23 at 10:44:28 GMT+05:30
//


package edu.wustl.common.cde.xml.impl;

import org.xml.sax.SAXException;

import com.sun.tools.xjc.runtime.AbstractUnmarshallingEventHandlerImpl;
import com.sun.tools.xjc.runtime.UnmarshallableObject;
import com.sun.tools.xjc.runtime.UnmarshallingContext;
import com.sun.tools.xjc.runtime.UnmarshallingEventHandler;
import com.sun.tools.xjc.runtime.Util;
import com.sun.tools.xjc.runtime.ValidatableObject;
import com.sun.tools.xjc.runtime.XMLSerializable;
import com.sun.tools.xjc.runtime.XMLSerializer;

import edu.wustl.common.util.global.Constants;
/**
 *
 * @author
 *
 */
public class XMLPermissibleValueTypeImpl // NOPMD
				implements edu.wustl.common.cde.xml.XMLPermissibleValueType,
				com.sun.xml.bind.JAXBObject,UnmarshallableObject,XMLSerializable,ValidatableObject
{
	/**
	 * boolean variable.
	 */
    private boolean hasDepthOfHierarchyTree;
    /**
     * Integer variable.
     */
    private int depthOfHierarchyTree;
    /**
     * String object.
     */
    private java.lang.String evsTerminology;
    /**
     * String object.
     */
    private java.lang.String parentConceptCode;
    /**
     * String object.
     */
    private java.lang.String conceptCode;
    /**
     * Class object.
     */
    public static final java.lang.Class VERSION = (edu.wustl.common.cde.xml.impl.JAXBVersion.class);
    /**
     * DEPTH OF HIERACHY TREE CONSTANT.
     */
    public static final String DEPTH_OF_HIERACHY_TREE = "DepthOfHierarchyTree" ;
    /**
     * Grammar object.
     */
    private static com.sun.msv.grammar.Grammar schemaFragment;
    /**
     *
     * @return Class object.
     */
   /* private final static java.lang.Class PRIMARY_INTERFACE_CLASS()
    {
    	return edu.wustl.common.cde.xml.XMLPermissibleValueType.class;
    }*/
    /**
     * @return integer value.
     */
    public int getDepthOfHierarchyTree()
    {
        return depthOfHierarchyTree;
    }
    /**
     * @param value integer value to set.
     */
    public void setDepthOfHierarchyTree(int value)
    {
        depthOfHierarchyTree = value;
        hasDepthOfHierarchyTree = true;
    }
    /**
     * @return String value.
     */
    public java.lang.String getEvsTerminology()
    {
        return evsTerminology;
    }
    /**
     * @param value String value to set.
     */
    public void setEvsTerminology(java.lang.String value)
    {
        evsTerminology = value;
    }
    /**
     * @return String value.
     */
    public java.lang.String getParentConceptCode()
    {
        return parentConceptCode;
    }
    /**
     * @param value String value to set.
     */
    public void setParentConceptCode(java.lang.String value)
    {
        parentConceptCode = value;
    }
    /**
     * @return String value.
     */
    public java.lang.String getConceptCode()
    {
        return conceptCode;
    }
    /**
     * @param value String value to set.
     */
    public void setConceptCode(java.lang.String value)
    {
        conceptCode = value;
    }
    /**
     * @param context UnmarshallingContext object.
     * @return UnmarshallingEventHandler object.
     */
    public UnmarshallingEventHandler createUnmarshaller(UnmarshallingContext context)
    {
        return new edu.wustl.common.cde.xml.impl.XMLPermissibleValueTypeImpl.Unmarshaller(context);
    }
    /**
     * @param context XMLSerializer object
     * @throws org.xml.sax.SAXException throws SAXException
     */
    public void serializeBody(XMLSerializer context) // NOPMD
        throws org.xml.sax.SAXException
    {
    	if (!hasDepthOfHierarchyTree)
        {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError
            		(this, DEPTH_OF_HIERACHY_TREE));
        }
    	/**
    	 * passing evsTerminology as parameter to context.
    	 */
        context = checkDepth(context,"evsTerminology",evsTerminology,"EvsTerminology") ;
        context.endElement();
        /**
    	 * passing conceptCode as parameter to context.
    	 */
        context = checkDepth(context,"conceptCode",conceptCode,"ConceptCode") ;
        context.endElement();
        /**
    	 * passing parentConceptCode as parameter to context.
    	 */
        context = checkDepth(context,"parentConceptCode",parentConceptCode,"ParentConceptCode") ;
        context.endElement();

        context.startElement("", "depthOfHierarchyTree");
        context.endNamespaceDecls();
        context.endAttributes();
        try
        {
            context.text(javax.xml.bind.DatatypeConverter.printInt
            		(((int) depthOfHierarchyTree)), DEPTH_OF_HIERACHY_TREE);
        }
        catch (java.lang.Exception e)
        {
            Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
    }
    /**
     * @param context XMLSerializer object
     * @throws org.xml.sax.SAXException throws SAXException
     */
    public void serializeAttributes(XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (!hasDepthOfHierarchyTree)
        {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError
            		(this, DEPTH_OF_HIERACHY_TREE));
        }
    }
    /**
     * @param context XMLSerializer object
     * @throws org.xml.sax.SAXException throws SAXException
     */
    public void serializeURIs(XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        if (!hasDepthOfHierarchyTree)
        {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError
            		(this, DEPTH_OF_HIERACHY_TREE));
        }
    }
    /**
     * @return Class object.
     */
    public java.lang.Class getPrimaryInterface()
    {
        return edu.wustl.common.cde.xml.XMLPermissibleValueType.class;
    }
    /**
     * @return DocumentDeclaration object.
     */
    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() // NOPMD
    {
        if (schemaFragment == null)
        {
        	schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
        			"\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000" +
        			"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom." +
        			"sun.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002" +
        			"\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/grammar/Expression;L\u0000" +
        			"\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expression\u00f8"+
        			"\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000" +
        			"\u0013Ljava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xpppsq" +
        			"\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\'com.sun.msv.grammar.trex." +
        			"ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000" +
        			"\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000" +
        			"\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontent" +
        			"Modelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003pp\u0000sq\u0000~\u0000\u0000ppsr" +
        			"\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype" +
        			"/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dL"+
        			"com/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000#com.sun.msv.data" +
        			"type.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000" +
        			"\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType" +
        			"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com." +
        			"sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000" +
        			"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespace" +
        			"Urit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0015L\u0000" +
        			"\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 " +
        			"http://www.w3.org/2001/XMLSchemat\u0000\u0006stringsr\u00005com.sun.msv.datatype"+
        			".xsd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor" +
        			"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr" +
        			"\u00000com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000" +
        			"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr" +
        			"\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0" +
        			"\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0015L\u0000\fnamespace" +
        			"URIq\u0000~\u0000\u0015xpq\u0000~\u0000\u0019q\u0000~\u0000\u0018sr\u0000" +
        			"\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar." +
        			"AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L" +
        			"\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\txq\u0000" +
        			"~\u0000\u0003sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa" +
        			"\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\rppsr\u0000" +
        			"\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0012q\u0000~\u0000\u0018t\u0000\u0005QN"+
        			"amesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000" +
        			"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001bq" +
        			"\u0000~\u0000\u001esq\u0000~\u0000\u001fq\u0000~\u0000*q\u0000~\u0000\u0018sr" +
        			"\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0015L\u0000" +
        			"\fnamespaceURIq\u0000~\u0000\u0015xr\u0000\u001dcom.sun.msv.grammar.NameClass" +
        			"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000" +
        			"\u0004typet\u0000)http://www.w3.org/2001/XMLSchema-instancesr\u00000com.sun." +
        			"msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000%\u0001ps" +
        			"q\u0000~\u0000.t\u0000\u000eevsTerminologyt\u0000\u0000sq\u0000~\u0000\bpp" +
        			"\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u0010sq\u0000~\u0000!ppsq\u0000~" +
        			"\u0000#q\u0000~\u0000&pq\u0000~\u0000\'q\u0000~\u00000q\u0000~\u00004sq\u0000" +
        			"~\u0000.t\u0000\u000bconceptCodeq\u0000~\u00008sq\u0000~\u0000\bpp\u0000sq" +
        			"\u0000~\u0000\u0000ppq\u0000~\u0000\u0010sq\u0000~\u0000!ppsq\u0000~\u0000#q" +
        			"\u0000~\u0000&pq\u0000~\u0000\'q\u0000~\u00000q\u0000~\u00004sq\u0000~\u0000" +
        			".t\u0000\u0011parentConceptCodeq\u0000~\u00008sq\u0000~\u0000\bpp\u0000sq" +
        			"\u0000~\u0000\u0000ppsq\u0000~\u0000\rppsr\u0000 com.sun.msv.datatype.xsd." +
        			"IntType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr" +
        			"\u0000+com.sun.msv.datatype.xsd.IntegerDerivedType\u0099\u00f1]\u0090&6k\u00be"+
        			"\u0002\u0000\u0001L\u0000\nbaseFacetst\u0000)Lcom/sun/msv/datatype/xsd/XSData" +
        			"typeImpl;xq\u0000~\u0000\u0012q\u0000~\u0000\u0018t\u0000\u0003intq\u0000~" +
        			"\u0000,sr\u0000*com.sun.msv.datatype.xsd.MaxInclusiveFacet\u0000\u0000\u0000" +
        			"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype" +
        			".xsd.RangeFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000" +
        			"\u0001L\u0000\nlimitValuet\u0000\u0012Ljava/lang/Object;xr\u00009com.sun.msv." +
        			"datatype.xsd.DataTypeWithValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002"+
        			"\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000" +
        			"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ" +
        			"\u0000\u0012needValueCheckFlagL\u0000\bbaseTypeq\u0000~\u0000JL\u0000\fconcrete" +
        			"Typet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~" +
        			"\u0000\u0015xq\u0000~\u0000\u0014ppq\u0000~\u0000,\u0000\u0001sr\u0000*com.sun." +
        			"msv.datatype.xsd.MinInclusiveFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0001\u0002\u0000\u0000xq\u0000~\u0000Nppq\u0000~\u0000,\u0000\u0000sr\u0000" +
        			"!com.sun.msv.datatype.xsd.LongType\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0001\u0002\u0000\u0000xq\u0000~\u0000Iq\u0000~\u0000\u0018t\u0000\u0004longq" +
        			"\u0000~\u0000,sq\u0000~\u0000Mppq\u0000~\u0000,\u0000\u0001sq\u0000~\u0000Tppq" +
        			"\u0000~\u0000,\u0000\u0000sr\u0000$com.sun.msv.datatype.xsd.IntegerType\u0000" +
        			"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Iq" +
        			"\u0000~\u0000\u0018t\u0000\u0007integerq\u0000~\u0000,sr\u0000,com.sun.msv" +
        			".datatype.xsd.FractionDigitsFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0001\u0002\u0000\u0001I\u0000\u0005scalexr\u0000;com.sun.msv.datatype.xsd." +
        			"DataTypeWithLexicalConstraintFacetT\u0090\u001c>\u001azb\u00ea\u0002\u0000" +
        			"\u0000xq\u0000~\u0000Qppq\u0000~\u0000,\u0001\u0000sr\u0000#com.sun.msv.data" +
        			"type.xsd.NumberType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002" +
        			"\u0000\u0000xq\u0000~\u0000\u0012q\u0000~\u0000\u0018t\u0000\u0007decimalq" +
        			"\u0000~\u0000,q\u0000~\u0000bt\u0000\u000efractionDigits\u0000\u0000\u0000" +
        			"\u0000q\u0000~\u0000\\t\u0000\fminInclusivesr\u0000\u000ejava.lang.Long;" +
        			"\u008b\u00e4\u0090\u00cc\u008f#\u00df\u0002\u0000\u0001J\u0000\u0005value" +
        			"xr\u0000\u0010java.lang.Number\u0086\u00ac\u0095\u001d\u000b\u0094\u00e0\u008b" +
        			"\u0002\u0000\u0000xp\u0080\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0000~" +
        			"\u0000\\t\u0000\fmaxInclusivesq\u0000~\u0000f\u007f\u00ff\u00ff\u00ff\u00ff" +
        			"\u00ff\u00ff\u00ffq\u0000~\u0000Wq\u0000~\u0000esr\u0000\u0011java.lang.Integer" +
        			 "\u0012\u00e2\u00a0\u00a4\u00f7\u0081\u00878\u0002\u0000\u0001I\u0000\u0005" +
        			"valuexq\u0000~\u0000g\u0080\u0000\u0000\u0000q\u0000~\u0000Wq\u0000~\u0000isq" +
        			"\u0000~\u0000k\u007f\u00ff\u00ff\u00ffq\u0000~\u0000\u001esq\u0000~\u0000\u001fq"+
        			"\u0000~\u0000Lq\u0000~\u0000\u0018sq\u0000~\u0000!ppsq\u0000~\u0000#q\u0000~" +
        			"\u0000&pq\u0000~\u0000\'q\u0000~\u00000q\u0000~\u00004sq\u0000~\u0000.t\u0000" +
        			"\u0014depthOfHierarchyTreeq\u0000~\u00008sr\u0000\"com.sun.msv.grammar." +
        			"ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000" +
        			"\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash" +
        			";xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef" +
        			"\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL" +
        			"\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000" +
        			"\u0000\u000b\u0001pq\u0000~\u0000Aq\u0000~\u0000\u0007q\u0000~\u0000oq\u0000~" +
        			"\u0000\u0006q\u0000~\u0000\fq\u0000~\u0000:q\u0000~\u0000@q\u0000~\u0000\u0005q" +
        			"\u0000~\u0000Fq\u0000~\u0000\"q\u0000~\u0000;x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }
    /**
     *
     * @author
     *
     */
    public class Unmarshaller // NOPMD by shrishail_kalshetty on 9/1/09 3:26 PM
        extends AbstractUnmarshallingEventHandlerImpl
    {
    	/**
    	 *
    	 * @param context UnmarshallingContext object.
    	 */
        public Unmarshaller(UnmarshallingContext context)
        {
            super(context, "-------------");
        }
        /**
         *
         * @param context UnmarshallingContext object.
         * @param startState ineteger value to set.
         */
        protected Unmarshaller(UnmarshallingContext context, int startState)
        {
            this(context);
            state = startState;
        }
        /**
         * @return object.
         */
        public java.lang.Object owner()
        {
            return edu.wustl.common.cde.xml.impl.XMLPermissibleValueTypeImpl.this;
        }
        /**
         *
         * @param uri String value
         * @param local String value
         * @param qname String value
         * @param atts Attributes object
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void enterElement(java.lang.String uri, java.lang.String local, // NOPMD
        		java.lang.String qname, org.xml.sax.Attributes atts)
            throws org.xml.sax.SAXException
        {
        	boolean flag = true ;
            while (true)
            {
                switch (state)
                {
                    case  0 :
                        if (("evsTerminology" == local)&&("" == uri))
                        {
                            context.pushAttributes(atts, true);
                            state = Constants.ONE;
                            flag = false ;
                        }
                        break;
                    case  Constants.CONSTANT_NINE :
                        if (("depthOfHierarchyTree" == local)&&("" == uri))
                        {
                            context.pushAttributes(atts, true);
                            state = 10;
                            flag = false ;
                        }
                        break;
                    case  Constants.CONSTANT_THREE :
                        if (("conceptCode" == local)&&("" == uri))
                        {
                            context.pushAttributes(atts, true);
                            state = Constants.CONSTANT_FOUR;
                            flag = false ;
                        }
                        break;
                    case  12 :
                        revertToParentFromEnterElement(uri, local, qname, atts);
                        flag = false ;
                        break ;
                    case  Constants.CONSTANT_SIX :
                        if (("parentConceptCode" == local)&&("" == uri))
                        {
                            context.pushAttributes(atts, true);
                            state = Constants.CONSTANT_SEVEN;
                            return ;
                        }
                        break;
                   default :
                }
                if(!flag)
                { break ; }
                super.enterElement(uri, local, qname, atts);
                break;
            }
        }
        /**
         *
         * @param uri String value
         * @param local String value
         * @param qname String value
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void leaveElement(java.lang.String uri, java.lang.String local, // NOPMD
        		java.lang.String qname)
            throws org.xml.sax.SAXException
        {
        	boolean flag = true ;
            while (true)
            {
                switch (state)
                {
                    case  Constants.CONSTANT_FIVE :
                        if (("conceptCode" == local)&&("" == uri))
                        {
                            context.popAttributes();
                            state = Constants.CONSTANT_SIX;
                            flag = false ;
                        }
                        break;
                    case  Constants.CONSTANT_TWO :
                        if (("evsTerminology" == local)&&("" == uri))
                        {
                            context.popAttributes();
                            state = Constants.CONSTANT_THREE;
                            flag = false ;
                        }
                        break;
                    case  11 :
                        if (("depthOfHierarchyTree" == local)&&("" == uri))
                        {
                            context.popAttributes();
                            state = 12;
                            flag = false ;
                        }
                        break;
                    case  12 :
                        revertToParentFromLeaveElement(uri, local, qname);
                        flag = false ;
                        break ;
                    case  Constants.CONSTANT_EIGHT :
                        if (("parentConceptCode" == local)&&("" == uri))
                        {
                            context.popAttributes();
                            state = Constants.CONSTANT_NINE;
                            return ;
                        }
                        break;
                    default :
                }
                if(!flag)
                {  	break ; }
                super.leaveElement(uri, local, qname);
                break;
            }
        }
        /**
         *
         * @param uri String value
         * @param local String value
         * @param qname String value
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void enterAttribute(java.lang.String uri, java.lang.String local,
        		java.lang.String qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true)
            {
            	if (state == 12)
        		{
            		revertToParentFromEnterAttribute(uri, local, qname);
        			break ;
        		}
        		else
        		{
        			super.enterAttribute(uri, local, qname);
                    break;
                 }
            }
        }
        /**
         *
         * @param uri String value
         * @param local String value
         * @param qname String value
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void leaveAttribute(java.lang.String uri, java.lang.String local,
        		java.lang.String qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            	while (true)
            	{
            		if (state == 12)
            		{
            			revertToParentFromLeaveAttribute(uri, local, qname);
            			break ;
            		}
            		else
            		{
            			super.leaveAttribute(uri, local, qname);
            			break;
            		}
            	}
        }
        /**
         * @param value String value.
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void handleText(final java.lang.String value) // NOPMD
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true)
            {
                try
                {
                    switch (state)
                    {
                        case  Constants.CONSTANT_FOUR :
                            eatText1(value);
                            state = Constants.CONSTANT_FIVE;
                            break ;
                        case  Constants.CONSTANT_SEVEN :
                            eatText2(value);
                            state = Constants.CONSTANT_EIGHT;
                            break ;
                        case  Constants.ONE :
                            eatText3(value);
                            state = Constants.CONSTANT_TWO;
                            break ;
                        case  12 :
                            revertToParentFromText(value);
                            break ;
                        case  10 :
                            eatText4(value);
                            state = 11;
                            break ;
                        default :
                    }
                }
                catch (java.lang.RuntimeException e)
                {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }
        /**
         * @param value String value.
         * @throws org.xml.sax.SAXException throw SAXException
         */
        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try
            {
                conceptCode = value;
            }
            catch (java.lang.Exception e)
            {
                handleParseConversionException(e);
            }
        }
        /**
         * @param value String value.
         * @throws org.xml.sax.SAXException throw SAXException
         */
        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try
            {
                parentConceptCode = value;
            }
            catch (java.lang.Exception e)
            {
                handleParseConversionException(e);
            }
        }
        /**
         * @param value String value.
         * @throws org.xml.sax.SAXException throw SAXException
         */
        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try
            {
                evsTerminology = value;
            }
            catch (java.lang.Exception e)
            {
                handleParseConversionException(e);
            }
        }
        /**
         * @param value String value.
         * @throws org.xml.sax.SAXException throw SAXException
         */
        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try
            {
                depthOfHierarchyTree = javax.xml.bind.DatatypeConverter.parseInt
                (com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                hasDepthOfHierarchyTree = true;
            }
            catch (java.lang.Exception e)
            {
                handleParseConversionException(e);
            }
        }
    }
    /**
     *
     * @param context XMLSerializer object.
     * @param startValue Value used in context.startElement method.
     * @param textValue1 Value used in context.text method.
     * @param textValue2 Value used in context.text method.
     * @return XMLSerializer object.
     * @throws SAXException throw SAXException
     */
    public XMLSerializer checkDepth(XMLSerializer context,String startValue,String textValue1
    								,String textValue2) throws SAXException
    {
    	context.startElement("", startValue);
    	context.endNamespaceDecls();
    	context.endAttributes();
    	try
    	{
    		context.text(((java.lang.String) textValue1), textValue2);
    	}
    	catch (java.lang.Exception e)
    	{
    		Util.handlePrintConversionException(this, e, context);
    	}
    	return context ;
    }
}
