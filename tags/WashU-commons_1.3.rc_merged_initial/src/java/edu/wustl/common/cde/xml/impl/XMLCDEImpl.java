//
// This file was generated by the JavaTM Architecture for
//XML Binding(JAXB) Reference Implementation, v1.0.4-b18-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2005.08.23 at 10:44:28 GMT+05:30
//


package edu.wustl.common.cde.xml.impl;

import org.xml.sax.SAXException;

import com.sun.tools.xjc.runtime.AbstractUnmarshallingEventHandlerImpl;
import com.sun.tools.xjc.runtime.UnmarshallableObject;
import com.sun.tools.xjc.runtime.UnmarshallingContext;
import com.sun.tools.xjc.runtime.UnmarshallingEventHandler;
import com.sun.tools.xjc.runtime.Util;
import com.sun.tools.xjc.runtime.ValidatableObject;
import com.sun.tools.xjc.runtime.XMLSerializable;
import com.sun.tools.xjc.runtime.XMLSerializer;

import edu.wustl.common.util.global.Constants;
/**
 *
 * @author
 *
 */
public class XMLCDEImpl
				implements edu.wustl.common.cde.xml.XMLCDE,
							com.sun.xml.bind.JAXBObject, UnmarshallableObject,
							XMLSerializable, ValidatableObject
{
	/**
	 * List Implementation object.
	 */
    protected com.sun.xml.bind.util.ListImpl _XMLPermissibleValues;
    /**
     * boolean variable.
     */
    private boolean hasCache;
    /**
     * boolean variable.
     */
    private boolean cache;
    /**
     *  String variable.
     */
    private java.lang.String name;
    /**
     * String variable.
     */
    private java.lang.String publicId;
    /**
     * boolean variable.
     */
    private boolean hasLazyLoading;
    /**
     * boolean variable.
     */
    private boolean lazyLoading;
    /**
     * Class constant variable.
     */
    public static final java.lang.Class VERSION = (edu.wustl.common.cde.xml.impl.JAXBVersion.class);
    /**
     * XML PERMISSIBLE VALUES CONSTANT.
     */
    public static final String XML_PERMISSIBLE_VALUES = "XMLPermissibleValues" ;
    /**
     *
     * Grammar object.
     */
    private static com.sun.msv.grammar.Grammar schemaFragment;
    /**
     *
     * @return Class object
     */
   /* private static final java.lang.Class PRIMARY_INTERFACE_CLASS()
    {
        return (edu.wustl.common.cde.xml.XMLCDE.class);
    }*/
    /**
     *
     * @return List Implementation object.
     */
    protected com.sun.xml.bind.util.ListImpl _getXMLPermissibleValues() // NOPMD
    {
        if (_XMLPermissibleValues == null)
        {
            _XMLPermissibleValues = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _XMLPermissibleValues;
    }
    /**
     *
     * @return List object
     */
    public java.util.List getXMLPermissibleValues()
    {
        return _getXMLPermissibleValues();
    }
    /**
     *
     * @return boolean result
     */
    public boolean isCache()
    {
        return cache;
    }
    /**
     *
     * @param value boolean value to set.
     */
    public void setCache(boolean value)
    {
        cache = value;
        hasCache = true;
    }
    /**
     *
     * @return String value
     */
    public java.lang.String getName()
    {
        return name;
    }
    /**
     *
     * @param value String value to set.
     */
    public void setName(java.lang.String value)
    {
        name = value;
    }
    /**
     *
     * @return String value of _PublicId.
     */
    public java.lang.String getPublicId()
    {
        return publicId;
    }
    /**
     *
     * @param value String value to set.
     */
    public void setPublicId(java.lang.String value)
    {
        publicId = value;
    }
    /**
     *
     * @return boolean value.
     */
    public boolean isLazyLoading()
    {
        return lazyLoading;
    }
    /**
     *
     * @param value boolean value to set.
     */
    public void setLazyLoading(boolean value)
    {
        lazyLoading = value;
        hasLazyLoading = true;
    }
    /**
     *
     * @param context UnmarshallingContext object.
     * @return UnmarshallingEventHandler object.
     */
    public UnmarshallingEventHandler createUnmarshaller(UnmarshallingContext context)
    {
        return new edu.wustl.common.cde.xml.impl.XMLCDEImpl.Unmarshaller(context);
    }
    /**
     *
     * @param context XMLSerializer object.
     * @throws org.xml.sax.SAXException throw SAXException
     */
    public void serializeBody(XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_XMLPermissibleValues == null)? 0 :_XMLPermissibleValues.size());
        context.startElement("", "name");
        context.endNamespaceDecls();
        context.endAttributes();
        try
        {
            context.text(((java.lang.String) name), "Name");
        }
        catch (java.lang.Exception e)
        {
            Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        context.startElement("", "publicId");
        context.endNamespaceDecls();
        context.endAttributes();
        try
        {
            context.text(((java.lang.String) publicId), "PublicId");
        }
        catch (java.lang.Exception e)
        {
            Util.handlePrintConversionException(this, e, context);
        }
        context.endElement();
        while (idx1 != len1)
        {
            context.startElement("", XML_PERMISSIBLE_VALUES);
            int idx4 = idx1;
            context.childAsURIs(((com.sun.xml.bind.JAXBObject)
            		_XMLPermissibleValues.get(idx4 ++)), XML_PERMISSIBLE_VALUES);
            context.endNamespaceDecls();
            int idx5 = idx1;
            context.childAsAttributes(((com.sun.xml.bind.JAXBObject)
            		_XMLPermissibleValues.get(idx5 ++)), XML_PERMISSIBLE_VALUES);
            context.endAttributes();
            context.childAsBody(((com.sun.xml.bind.JAXBObject)
            		_XMLPermissibleValues.get(idx1 ++)), XML_PERMISSIBLE_VALUES);
            context.endElement();
        }
    }
    /**
     *
     * @param context XMLSerializer object.
     * @throws org.xml.sax.SAXException throw SAXException
     */
    public void serializeAttributes(XMLSerializer context) // NOPMD
        throws org.xml.sax.SAXException
    {
    	int idx1 = 0;
    	final int len1 = ((_XMLPermissibleValues == null)? 0 :_XMLPermissibleValues.size());
    	if (hasCache)
    	{
    		context = checkSerializeAttributes(context, "cache", "Cache",cache) ;
    	}
    	if (hasLazyLoading)
    	{
    		context = checkSerializeAttributes(context, Constants.LAZY_LOADING, "LazyLoading",lazyLoading) ;
    	}
    	while (idx1 != len1)
    	{
    		idx1 += Constants.ONE;
    	}
    }
    /**
     *
     * @param context XMLSerializer object.
     * @throws org.xml.sax.SAXException throw SAXException
     */
    public void serializeURIs(XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_XMLPermissibleValues == null)? 0 :_XMLPermissibleValues.size());
        while (idx1 != len1)
        {
            idx1 += Constants.ONE;
        }
    }
    /**
     *
     * @return Class object.
     */
    public java.lang.Class getPrimaryInterface()
    {
        return (edu.wustl.common.cde.xml.XMLCDE.class);
    }
    /**
     *
     * @return DocumentDeclaration object.
     */
    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() // NOPMD
    {
        if (schemaFragment == null)
        {
        	schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
        			"\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000" +
        			"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"+
        			"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002" +
        			"\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/grammar/Expression;L\u0000" +
        			"\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expression\u00f8"+
        			"\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000" +
        			"\u0013Ljava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xpppsq" +
        			"\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000" +
        			"\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv" +
        			"/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000" +
        			"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignore" +
        			"UndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000" +
        			"\u0003pp\u0000sq\u0000~\u0000\u0000ppsr\u0000\u001bcom.sun.msv.grammar." +
        			"DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L" +
        			"\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006excep" +
        			"tq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair" +
        			";xq\u0000~\u0000\u0003ppsr\u0000#com.sun.msv.datatype.xsd.StringType\u0000" +
        			"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlways" +
        			"Validxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000" +
        			"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype." +
        			"xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000" +
        			"\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000" +
        			"\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012L" +
        			"java/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0016L\u0000\nwhiteSpacet" +
        			"\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org"+
        			"/2001/XMLSchemat\u0000\u0006stringsr\u00005com.sun.msv.datatype.xsd.WhiteSpace" +
        			"Processor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000" +
        			"\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000" +
        			"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv." +
        			"grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util." +
        			"StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq"+
        			"\u0000~\u0000\u0016L\u0000\fnamespaceURIq\u0000~\u0000\u0016xpq\u0000~\u0000" +
        			"\u001aq\u0000~\u0000\u0019sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000" +
        			"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000" +
        			"\u0001ppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000" +
        			"\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000" +
        			"\tnameClassq\u0000~\u0000\nxq\u0000~\u0000\u0003sr\u0000\u0011java.lang.Boolean" +
        			"\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp" +
        			"\u0000psq\u0000~\u0000\u000eppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000"+
        			"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000" +
        			"\u0013q\u0000~\u0000\u0019t\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd." +
        			"WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001" +
        			"\u0002\u0000\u0000xq\u0000~\u0000\u001cq\u0000~\u0000\u001fsq\u0000~\u0000 q" +
        			"\u0000~\u0000+q\u0000~\u0000\u0019sr\u0000#com.sun.msv.grammar.SimpleNameClass" +
        			"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000" +
        			"\tlocalNameq\u0000~\u0000\u0016L\u0000\fnamespaceURIq\u0000~\u0000\u0016xr" +
        			"\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0004typet\u0000)http://www.w3.org/2001"+
        			"/XMLSchema-instancesr\u00000com.sun.msv.grammar.Expression$EpsilonExpression" +
        			"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~" +
        			"\u0000\u0003sq\u0000~\u0000&\u0001psq\u0000~\u0000/t\u0000\u0004namet\u0000" +
        			"\u0000sq\u0000~\u0000\tpp\u0000sq\u0000~\u0000\u0000ppq\u0000~\u0000\u0011sq" +
        			"\u0000~\u0000\"ppsq\u0000~\u0000$q\u0000~\u0000\'pq\u0000~\u0000(q\u0000~" +
        			"\u00001q\u0000~\u00005sq\u0000~\u0000/t\u0000\bpublicIdq\u0000~\u00009sr\u0000" +
        			" com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000" +
        			"\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000" +
        			"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~" +
        			"\u0000\u0002xq\u0000~\u0000\u0003ppsq\u0000~\u0000\tpp\u0000sq\u0000~\u0000" +
        			"\u0000ppsq\u0000~\u0000\tpp\u0000sq\u0000~\u0000\"ppsq\u0000~\u0000@q\u0000~" +
        			"\u0000\'psq\u0000~\u0000$q\u0000~\u0000\'psr\u00002com.sun.msv.grammar.Express" +
        			"ion$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002" +
        			"\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u00006psr\u0000 com.sun.msv.grammar." +
        			"AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000" +
        			"\u0000xq\u0000~\u00000q\u0000~\u00005sq\u0000~\u0000/t\u00000edu.wustl.common." +
        			"cde.xml.XMLPermissibleValueTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-" +
        			"elementssq\u0000~\u0000\"ppsq\u0000~\u0000$q\u0000~\u0000\'pq\u0000~\u0000" +
        			"(q\u0000~\u00001q\u0000~\u00005sq\u0000~\u0000/t\u0000\u0014XMLPermissible" +
        			"Valuesq\u0000~\u00009sq\u0000~\u0000\"ppsq\u0000~\u0000$q\u0000~\u0000\'psq" +
        			"\u0000~\u0000\u000eppsr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000" +
        			"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0013q" +
        			"\u0000~\u0000\u0019t\u0000\u0007booleanq\u0000~\u0000-q\u0000~\u0000\u001fsq" +
        			"\u0000~\u0000 q\u0000~\u0000Yq\u0000~\u0000\u0019sq\u0000~\u0000/t\u0000\u0005" +
        			"cacheq\u0000~\u00009q\u0000~\u00005sq\u0000~\u0000\"ppsq\u0000~\u0000$q\u0000~" +
        			"\u0000\'pq\u0000~\u0000Vsq\u0000~\u0000/t\u0000\u000blazyLoadingq\u0000~\u0000" +
        			"9q\u0000~\u00005sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000" +
        			"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom" +
        			"/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar." +
        			"ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000" +
        			"\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom" +
        			"/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u000f\u0001pq\u0000~" +
        			"\u0000Pq\u0000~\u0000\bq\u0000~\u0000Fq\u0000~\u0000]q\u0000~\u0000\u0006q" +
        			"\u0000~\u0000Gq\u0000~\u0000\rq\u0000~\u0000;q\u0000~\u0000\u0005q\u0000" +
        			"~\u0000\u0007q\u0000~\u0000Bq\u0000~\u0000Tq\u0000~\u0000Dq\u0000~\u0000#q" +
        			"\u0000~\u0000<x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }
    /**
     *
     * @author
     *
     */
    public class Unmarshaller // NOPMD
        extends AbstractUnmarshallingEventHandlerImpl
    {
    	/**
    	 *
    	 * @param context UnmarshallingContext object.
    	 */
    	public Unmarshaller(UnmarshallingContext context)
    	{
            super(context, "----------------");
        }
    	/**
    	 *
    	 * @param context UnmarshallingContext object.
    	 * @param startState ineteger value to set.
    	 */
        protected Unmarshaller(UnmarshallingContext context, int startState)
        {
            this(context);
            state = startState;
        }
        /**
         *
         * @return Object
         */
        public java.lang.Object owner()
        {
            return edu.wustl.common.cde.xml.impl.XMLCDEImpl.this;
        }
        /**
         *
         * @param uri String parameter
         * @param local String parameter
         * @param qname String parameter
         * @param atts String parameter
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void enterElement(java.lang.String uri, java.lang.String local, // NOPMD
        		java.lang.String qname, org.xml.sax.Attributes atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            boolean flag = true ;
            outer:
            while (true)
            {
                switch (state)
                {
                    case  15 :
                        if ((XML_PERMISSIBLE_VALUES == local)&&("" == uri))
                        {
                            context.pushAttributes(atts, false);
                            state = 13;
                            flag = false ; break ;
                        }
                        revertToParentFromEnterElement(uri, local, qname, atts);
                        break ;
                    case  Constants.CONSTANT_NINE :
                        if (("publicId" == local)&&("" == uri))
                        {
                            context.pushAttributes(atts, true);
                            state = 10;
                            flag = false ;
                        }
                        break;
                    case  13 :
                        if (("evsTerminology" == local)&&("" == uri))
                        {
                           _getXMLPermissibleValues().add(((edu.wustl.common.cde.xml.impl.
                        	XMLPermissibleValueTypeImpl)spawnChildFromEnterElement((edu.wustl.common.cde.
                        	xml.impl.XMLPermissibleValueTypeImpl.class), 14, uri, local, qname, atts)));
                            flag = false ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "cache");
                        if (attIdx >= 0)
                        {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = Constants.CONSTANT_THREE;
                            continue outer;
                        }
                        state = Constants.CONSTANT_THREE;
                        continue outer;
                    case  Constants.CONSTANT_SIX :
                        if (("name" == local)&&("" == uri))
                        {
                            context.pushAttributes(atts, true);
                            state = Constants.CONSTANT_SEVEN;
                            flag = false ;
                        }
                        break;
                    case  12 :
                        if ((XML_PERMISSIBLE_VALUES == local)&&("" == uri))
                        {
                            context.pushAttributes(atts, false);
                            state = 13;
                            flag = false ;
                        }
                        break;
                    case  Constants.CONSTANT_THREE :
                        attIdx = context.getAttribute("", Constants.LAZY_LOADING);
                        if (attIdx >= 0)
                        {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = Constants.CONSTANT_SIX;
                            continue outer;
                        }
                        state = Constants.CONSTANT_SIX;
                        continue outer;

                    default :
                }
                if(!flag)
                { break ; }
                super.enterElement(uri, local, qname, atts);
                break;
            }
        }
        /**
         *
         * @param value String value to set
         * @throws org.xml.sax.SAXException throw SAXException
         */
        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try
            {
                cache = javax.xml.bind.DatatypeConverter.
                parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                hasCache = true;
            }
            catch (java.lang.Exception e)
            {
                handleParseConversionException(e);
            }
        }
        /**
         *
         * @param value String value to set
         * @throws org.xml.sax.SAXException throw SAXException
         */
        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try
            {
                lazyLoading = javax.xml.bind.DatatypeConverter.
                parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                hasLazyLoading = true;
            }
            catch (java.lang.Exception e)
            {
                handleParseConversionException(e);
            }
        }
        /**
         *
         * @param uri String parameter
         * @param local String parameter
         * @param qname String parameter
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void leaveElement(java.lang.String uri, java.lang.String local, // NOPMD
        		java.lang.String qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            boolean flag = true ;
            outer:
            while (true)
            {
                switch (state)
                {
                    case  15 :
                        revertToParentFromLeaveElement(uri, local, qname);
                        flag = false ; break ;
                    case  0 :
                        attIdx = context.getAttribute("", "cache");
                        if (attIdx >= 0)
                        {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = Constants.CONSTANT_THREE;
                            continue outer;
                        }
                        state = Constants.CONSTANT_THREE;
                        continue outer;
                    case  11 :
                        if (("publicId" == local)&&("" == uri))
                        {
                            context.popAttributes();
                            state = 12;
                            flag = false ;
                        }
                        break;
                    case  Constants.CONSTANT_THREE :
                        attIdx = context.getAttribute("", Constants.LAZY_LOADING);
                        if (attIdx >= 0)
                        {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = Constants.CONSTANT_SIX;
                            continue outer;
                        }
                        state = Constants.CONSTANT_SIX;
                        continue outer;
                    case  Constants.CONSTANT_EIGHT :
                        if (("name" == local)&&("" == uri))
                        {
                            context.popAttributes();
                            state = Constants.CONSTANT_NINE;
                            flag = false ;
                        }
                        break;
                    case  14 :
                        if ((XML_PERMISSIBLE_VALUES == local)&&("" == uri))
                        {
                            context.popAttributes();
                            state = 15;
                            flag = false ;
                        }
                        break;

                    default :
                }
                if(!flag)
                { break ; }
                super.leaveElement(uri, local, qname);
                break;
            }
        }
        /**
         *
         * @param uri String parameter
         * @param local String parameter
         * @param qname String parameter
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void enterAttribute(java.lang.String uri, java.lang.String local, // NOPMD
        		java.lang.String qname)
            throws org.xml.sax.SAXException
        {
            boolean flag = true ;
            outer:
            while (true)
            {
                switch (state)
                {
                    case  15 :
                        revertToParentFromEnterAttribute(uri, local, qname);
                        flag = false ;break ;
                    case  0 :
                        if (("cache" == local)&&("" == uri))
                        {
                            state = Constants.CONSTANT_ONE;
                            flag = false ; break ;
                        }
                        state = Constants.CONSTANT_THREE;
                        continue outer;
                    case  Constants.CONSTANT_THREE :
                        if ((Constants.LAZY_LOADING == local)&&("" == uri))
                        {
                            state = Constants.CONSTANT_FOUR;
                            flag = false ; break ;
                        }
                        state = Constants.CONSTANT_SIX;
                        continue outer;

                     default :
                }
                if(!flag)
                { break ;  }
                super.enterAttribute(uri, local, qname);
                break;
            }
        }
        /**
         *
         * @param uri String parameter
         * @param local String parameter
         * @param qname String parameter
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void leaveAttribute(java.lang.String uri, java.lang.String local, // NOPMD
        		java.lang.String qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            boolean flag = true ;
            outer:
            while (true)
            {
                switch (state)
                {
                    case  15 :
                        revertToParentFromLeaveAttribute(uri, local, qname);
                        flag = false ; break ;
                    case  Constants.CONSTANT_FIVE :
                        if ((Constants.LAZY_LOADING == local)&&("" == uri))
                        {
                            state = Constants.CONSTANT_SIX;
                            flag = false ;
                        }
                        break;
                    case  Constants.CONSTANT_TWO :
                        if (("cache" == local)&&("" == uri))
                        {
                            state = Constants.CONSTANT_THREE;
                            flag = false ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "cache");
                        if (attIdx >= 0)
                        {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = Constants.CONSTANT_THREE;
                            continue outer;
                        }
                        state = Constants.CONSTANT_THREE;
                        continue outer;
                    case  Constants.CONSTANT_THREE :
                        attIdx = context.getAttribute("", Constants.LAZY_LOADING);
                        if (attIdx >= 0)
                        {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText2(v);
                            state = Constants.CONSTANT_SIX;
                            continue outer;
                        }
                        state = Constants.CONSTANT_SIX;
                        continue outer;

                    default :
                }
                if(!flag)
                { break ; }
                super.leaveAttribute(uri, local, qname);
                break;
            }
        }
        /**
         *
         * @param value String value to set.
         * @throws org.xml.sax.SAXException throw SAXException
         */
        public void handleText(final java.lang.String value) // NOPMD
            throws org.xml.sax.SAXException
        {
            int attIdx;
            boolean flag = true ;
            outer:
            while (true)
            {
                try
                {
                    switch (state)
                    {
                        case  15 :
                            revertToParentFromText(value);
                            flag = false ; break ;
                        case  0 :
                            attIdx = context.getAttribute("", "cache");
                            if (attIdx >= 0)
                            {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = Constants.CONSTANT_THREE;
                                continue outer;
                            }
                            state = Constants.CONSTANT_THREE;
                            continue outer;
                        case  Constants.CONSTANT_ONE :
                            eatText1(value);
                            state = Constants.CONSTANT_TWO;
                            flag = false ; break ;
                        case  Constants.CONSTANT_SEVEN :
                            eatText3(value);
                            state = Constants.CONSTANT_EIGHT;
                            flag = false ; break ;
                        case  10 :
                            eatText4(value);
                            state = 11;
                            flag = false ; break ;
                        case  Constants.CONSTANT_FOUR :
                            eatText2(value);
                            state = Constants.CONSTANT_FIVE;
                            flag = false ; break ;
                        case  Constants.CONSTANT_THREE :
                            attIdx = context.getAttribute("", Constants.LAZY_LOADING);
                            if (attIdx >= 0)
                            {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText2(v);
                                state = Constants.CONSTANT_SIX;
                                continue outer;
                            }
                            state = Constants.CONSTANT_SIX;
                            continue outer;

                       default :
                    }
                }
                catch (java.lang.RuntimeException e)
                {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }
        /**
         *
         * @param value String value to set
         * @throws org.xml.sax.SAXException throw SAXException
         */
        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try
            {
                name = value;
            }
            catch (java.lang.Exception e)
            {
                handleParseConversionException(e);
            }
        }
        /**
         *
         * @param value String value to set
         * @throws org.xml.sax.SAXException throw SAXException
         */
        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try
            {
                publicId = value;
            }
            catch (java.lang.Exception e)
            {
                handleParseConversionException(e);
            }
        }

    }
    /**
     *
     * @param context XMLSerializer object.
     * @param value1 String value used in context.startAttribute
     * @param value2 string value used in DatatypeConverter.printBoolean
     * @param parameter boolean value used in DatatypeConverter.printBoolean
     * @return XMLSerializer object
     * @throws SAXException throw SAXException
     */
    public XMLSerializer checkSerializeAttributes(XMLSerializer context,
    		String value1,String value2,boolean parameter) throws SAXException
    {
    	context.startAttribute("", value1);
        try
        {
            context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) parameter)), value2);
        }
        catch (java.lang.Exception e)
        {
           Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();

        return context ;
    }
}
